//Inserting a node in a doubly linked list (all three cases)
#include <stdio.h>
#include <stdlib.h>
struct dnode{
    struct dnode * prev;
    int data;
    struct dnode * next;
};
struct dnode *p=NULL, *q, *last, *tmp;

void beginning(){
    tmp->prev = NULL;
    tmp->next = p;
    p->prev = tmp;
    p=tmp;
}

void given_pos(){
    int pos, count=1;
    printf("Enter the position : ");
    scanf("%d", &pos);
    while(q!=NULL){
        if(count+1==pos){
            tmp->prev = q;
            q->next->prev = tmp;
            tmp->next = q->next;
            q->next = tmp;
        }
        q = q->next;
        count++;
    }
    
}

void end(){
    tmp->next=NULL;
    tmp->prev = last;
    last->next = tmp;
    last = tmp;
}
void main(){
    int d, choice, c;
    do{
        if(p==NULL){
            p = (struct dnode *)malloc(sizeof(struct dnode));
            p->prev = NULL;
            q=p;
        }
        else{
            q->next = (struct dnode *)malloc(sizeof(struct dnode));
            q->next->prev = q;
            q = q->next;
        }
        printf("Enter data : ");
        scanf("%d", &d);
        q->data = d;
        q->next = NULL;
        printf("Press 1 to enter more data and 0 to end : ");
        scanf("%d", &choice);
        if(choice==0)
        last = q;
    }while(choice==1);
    q=p;
    printf("\n\nThe doubly linked list is :\n");
    while(q!=NULL){
        printf("%d\t", q->data);
        q = q->next;
    }
    q=p;
    printf("\n\nInserting a node :\nPress 1 for at the beginning\nPress 2 for at a given position\nPress 3 for at the end\nEnter your choice : ");
    scanf("%d", &c);
    tmp = (struct dnode *)malloc(sizeof(struct dnode));
    printf("\nEnter data for the node : ");
    scanf("%d", &d);
    tmp->data = d;
    switch(c){
        case 1: beginning();
        break;
        case 2: given_pos();
        break;
        case 3: end();
    }
    q=p;
    printf("\n\nThe doubly linked list (after inserting node) is :\n");
    while(q!=NULL){
        printf("%d\t", q->data);
        q = q->next;
    }
}
